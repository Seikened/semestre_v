# =========================
# Ejercicio 2 - Umbral de probabilidad en Regresi√≥n Log√≠stica
# Autor: Fernando Leon Franco
# =========================

import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt

# 0 Descargar datos y preparar X, y (para independencia del c√≥digo anterior)
btc = yf.download("BTC-USD", start="2023-01-01", end="2025-01-01")
btc["Rendimiento"] = np.log(btc["Close"] / btc["Close"].shift(1))
btc["Rend_prev"] = btc["Rendimiento"].shift(1)
btc["Sube"] = np.where(btc["Rendimiento"] > 0, 1, 0)
btc = btc.dropna()
X = btc[["Rend_prev", "Volume"]]
y = btc["Sube"]

# 1 Escalar las variables
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 2 Reentrenar el modelo
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, shuffle=False)
modelo = LogisticRegression(class_weight='balanced', max_iter=500)
modelo.fit(X_train, y_train)

# 3 Probabilidades de subida
prob = modelo.predict_proba(X_test)[:, 1]

# 4 Cambiar umbral
umbral = 0.6  # ajusta entre 0.4 y 0.7
y_pred = (prob >= umbral).astype(int)

# 5 Evaluar
print("Umbral:", umbral)
print("Precisi√≥n:", round(accuracy_score(y_test, y_pred), 3))
print("\nMatriz de confusi√≥n:\n", confusion_matrix(y_test, y_pred))
print("\nReporte de clasificaci√≥n:\n", classification_report(y_test, y_pred))

# 6 Gr√°fica de probabilidades
plt.figure(figsize=(10, 5))
plt.plot(prob, label="Probabilidad de subida", color="red")
plt.axhline(y=umbral, color="gray", linestyle="--")
plt.title(f"Probabilidad de subida vs Umbral ({umbral})")
plt.legend()
plt.show()

# =========================
# An√°lisis r√°pido
# =========================
print("\n================= AN√ÅLISIS =================")
print(f"1Ô∏è‚É£  Umbral usado: {umbral}")
print("üëâ  Si el umbral sube (0.7), el modelo exige m√°s certeza antes de decir 'sube',")
print("    lo que reduce falsos positivos pero puede aumentar falsos negativos.")

print("\n2Ô∏è‚É£  Si bajas el umbral (0.4), el modelo predice m√°s subidas,")
print("    pero se arriesga a fallar m√°s veces en bajadas.")

print("\n3Ô∏è‚É£  La l√≠nea gris representa el l√≠mite de decisi√≥n en la gr√°fica:")
print("    todo punto rojo arriba de esa l√≠nea es clasificado como 'sube' (1).")

print("\n4Ô∏è‚É£  Para reducir riesgo de inversi√≥n, conviene un umbral m√°s alto (‚âà0.6‚Äì0.7).")
print("============================================")